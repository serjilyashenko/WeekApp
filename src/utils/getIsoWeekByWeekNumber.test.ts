import { InvalidDateError } from './errors';
import { getIsoWeekByWeekNumber } from './getIsoWeekByWeekNumber';

it.each([
  [1, '2023-01-02'],
  [2, '2023-01-09'],
  [3, '2023-01-16'],
  [4, '2023-01-23'],
  [5, '2023-01-30'],
  [6, '2023-02-06'],
  [7, '2023-02-13'],
  [8, '2023-02-20'],
  [9, '2023-02-27'],
  [10, '2023-03-06'],
  [11, '2023-03-13'],
  [12, '2023-03-20'],
  [13, '2023-03-27'],
  [14, '2023-04-03'],
  [15, '2023-04-10'],
  [16, '2023-04-17'],
  [17, '2023-04-24'],
  [18, '2023-05-01'],
  [19, '2023-05-08'],
  [20, '2023-05-15'],
  [21, '2023-05-22'],
  [22, '2023-05-29'],
  [23, '2023-06-05'],
  [24, '2023-06-12'],
  [25, '2023-06-19'],
  [26, '2023-06-26'],
  [27, '2023-07-03'],
  [28, '2023-07-10'],
  [29, '2023-07-17'],
  [30, '2023-07-24'],
  [31, '2023-07-31'],
  [32, '2023-08-07'],
  [33, '2023-08-14'],
  [34, '2023-08-21'],
  [35, '2023-08-28'],
  [36, '2023-09-04'],
  [37, '2023-09-11'],
  [38, '2023-09-18'],
  [39, '2023-09-25'],
  [40, '2023-10-02'],
  [41, '2023-10-09'],
  [42, '2023-10-16'],
  [43, '2023-10-23'],
  [44, '2023-10-30'],
  [45, '2023-11-06'],
  [46, '2023-11-13'],
  [47, '2023-11-20'],
  [48, '2023-11-27'],
  [49, '2023-12-04'],
  [50, '2023-12-11'],
  [51, '2023-12-18'],
  [52, '2023-12-25'],
])('2023 tests case: %o -> %o', (input, output) => {
  const isoWeekFirstWeek = getIsoWeekByWeekNumber(2023, input);

  expect(isoWeekFirstWeek.toLocaleString('en-SE')).toBe(output + ', 00:00:00');
});

it.each([
  [1, '2024-01-01'],
  [2, '2024-01-08'],
  [3, '2024-01-15'],
  [4, '2024-01-22'],
  [5, '2024-01-29'],
  [6, '2024-02-05'],
  [7, '2024-02-12'],
  [8, '2024-02-19'],
  [9, '2024-02-26'],
  [10, '2024-03-04'],
  [11, '2024-03-11'],
  [12, '2024-03-18'],
  [13, '2024-03-25'],
  [14, '2024-04-01'],
  [15, '2024-04-08'],
  [16, '2024-04-15'],
  [17, '2024-04-22'],
  [18, '2024-04-29'],
  [19, '2024-05-06'],
  [20, '2024-05-13'],
  [21, '2024-05-20'],
  [22, '2024-05-27'],
  [23, '2024-06-03'],
  [24, '2024-06-10'],
  [25, '2024-06-17'],
  [26, '2024-06-24'],
  [27, '2024-07-01'],
  [28, '2024-07-08'],
  [29, '2024-07-15'],
  [30, '2024-07-22'],
  [31, '2024-07-29'],
  [32, '2024-08-05'],
  [33, '2024-08-12'],
  [34, '2024-08-19'],
  [35, '2024-08-26'],
  [36, '2024-09-02'],
  [37, '2024-09-09'],
  [38, '2024-09-16'],
  [39, '2024-09-23'],
  [40, '2024-09-30'],
  [41, '2024-10-07'],
  [42, '2024-10-14'],
  [43, '2024-10-21'],
  [44, '2024-10-28'],
  [45, '2024-11-04'],
  [46, '2024-11-11'],
  [47, '2024-11-18'],
  [48, '2024-11-25'],
  [49, '2024-12-02'],
  [50, '2024-12-09'],
  [51, '2024-12-16'],
  [52, '2024-12-23'],
  [53, '2024-12-30'],
])('2024 tests case: %o -> %o', (input, output) => {
  const isoWeekFirstWeek = getIsoWeekByWeekNumber(2024, input);

  expect(isoWeekFirstWeek.toLocaleString('en-SE')).toBe(output + ', 00:00:00');
});

it('should throw an InvalidDateError for an invalid year', () => {
  expect(() => getIsoWeekByWeekNumber(999999, 1)).toThrow(InvalidDateError);
});
